# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file './untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from PyQt5 import QtCore, QtGui, QtWidgets
import PyQt5
import cv2
import qimage2ndarray
import numpy as np
from server import connect_with_server
from client_process import client_process
from load_config import config


user_checklist = config.checklist

class MainDialog(QtWidgets.QDialog):
    dropped = QtCore.pyqtSignal(str)
    def __init__(self):
        super().__init__()
        self.setObjectName("Dialog")
        self.resize(512, 768)
        self.setAcceptDrops(True)
    def dragEnterEvent(self,event):
        if event.mimeData().hasUrls():
            event.accept()
        else:
            event.ignore()
    def dropEvent(self,event):
        print('drop')
        img_url = event.mimeData().urls()[0].toLocalFile()
        self.dropped.emit(img_url)
class ImagePixMap(QtWidgets.QLabel):
    def __init__(self,parent):
        super().__init__(parent)
        self.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        self.resize(512,512)
        pixmap = QtGui.QPixmap("sample_img.png")
        self.setPixmap(QtGui.QPixmap(pixmap))


    def setImage(self,np_img):

        np_img = np_img[:,:,::-1]
        qimage = qimage2ndarray.array2qimage(np_img)
        pixmap = QtGui.QPixmap(qimage)
        pixmap = self.adjustImage(pixmap)
        self.setPixmap(QtGui.QPixmap(pixmap))
    
    def adjustImage(self,pixmap):
        h,w = pixmap.height(),pixmap.width()
        max_len = max(h,w)
        if max_len > 512:
            if h > w :
                pixmap = pixmap.scaledToHeight(512)
            else:
                pixmap = pixmap.scaledToWidth(512)
        return pixmap
class FoodGroupBox(QtWidgets.QGroupBox):
    def __init__(self,parent):
        super().__init__(parent)
        self.groupBox = QtWidgets.QGroupBox(self)
        self.groupBox.setGeometry(QtCore.QRect(220, 520, 281, 241))
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")

        self.class_name = QtWidgets.QListWidget(self.groupBox)
        self.class_name.setGeometry(QtCore.QRect(10, 20, 256, 21))
        self.class_name.setObjectName("class_name")
        self.class_name.addItem(QtWidgets.QListWidgetItem())

        self.recipes = QtWidgets.QListWidget(self.groupBox)
        self.recipes.setGeometry(QtCore.QRect(10, 50, 256, 171))
        self.recipes.setDragEnabled(True)
        self.recipes.setObjectName("recipes")
        self.recipes.addItem(QtWidgets.QListWidgetItem())
        self.recipes.addItem(QtWidgets.QListWidgetItem())
        self.recipes.addItem(QtWidgets.QListWidgetItem())
        _translate = QtCore.QCoreApplication.translate
        
        __sortingEnabled = self.recipes.isSortingEnabled()
        self.recipes.setSortingEnabled(False)
        item = self.recipes.item(0)
        item.setText(_translate("Dialog", "sample"))
        self.recipes.setSortingEnabled(__sortingEnabled)
    def set_pepr(self,repr):
        self.class_name.item(0).setText(repr[0])
        self.recipes.item(0).setText(repr[1])
        self.recipes.item(2).setText(repr[2])
class CheckScroll_legacy(QtWidgets.QPushButton):
    click = QtCore.pyqtSignal(bool)
    def __init__(self, parent):
        super().__init__('▷checkbox',parent)
        self.setGeometry(QtCore.QRect(24,572,188,21))
        # self.setMenu(QtWidgets.QMenu())
        self.add_checklist()
        self.setCheckable(True)
        self.setDown(True)


        self.checklist = CheckList(self)
        self.checklist_show = False
        # self.checkfile.move(0,20)
        # self.checkfile.setGeometry(QtCore.QRect(24,602,188,21))
        
        # self.toggled.connect(self.click_extend_bar)
        # print(self.isCheckable(),self.isDown(),self.isChecked())

        # self.setAction()
        # self.setCheckable(True)
        # self.clicked.connect(self.clicked.emit)
    def add_checklist(self):
        ch = ['a',',b','c']
        menu = QtWidgets.QMenu()
        for c in ch:
            action = menu.addAction(c)
            action.setCheckable(True)
        self.setMenu(menu)
    def mousePressEvent(self,event):
        ## event를 overwrite해줘야 signal이 정상 작동하는듯
        # print('press',self.isChecked())
        event.accept()
    def mouseReleaseEvent(self, event):
        # print('release',self.isChecked())
        
        self.checklist.show()
        # self.click_extend_bar()
        # self.clicked.emit(self.isChecked())

    def click_extend_bar(self):
        print('clicked',self.isChecked())
        if not self.isChecked():
            self.setText('▽checkbox')
            self.setChecked(True)
            print(self.menu())
            self.showMenu()
            print(self.menu())

        else:
            self.setText('▷checkbox')
            self.setChecked(False)

    def change_chacklist(self):
        pass
class CheckScroll2(QtWidgets.QPushButton):
    click = QtCore.pyqtSignal(bool)
    def __init__(self, parent):
        super().__init__('checklist setting',parent)
        self.setGeometry(QtCore.QRect(24,572,188,21))
        # self.setMenu(QtWidgets.QMenu())
        self.add_checklist()
        self.setCheckable(False)
        self.setDown(True)

        self.checklist = CheckList(self)
        self.checklist_show = False

    def add_checklist(self):
        ch = ['a',',b','c']
        menu = QtWidgets.QMenu()
        for c in ch:
            action = menu.addAction(c)
            action.setCheckable(True)
        self.setMenu(menu)
    def mousePressEvent(self,event):
        ## event를 overwrite해줘야 signal이 정상 작동하는듯
        # print('press',self.isChecked())
        event.accept()
    def mouseReleaseEvent(self, event):
        self.checklist.show()


    def click_extend_bar(self):
        print('clicked',self.isChecked())
        if not self.isChecked():
            self.setText('▽checkbox')
            self.setChecked(True)
            print(self.menu())
            self.showMenu()
            print(self.menu())

        else:
            self.setText('▷checkbox')
            self.setChecked(False)

    def change_chacklist(self):
         print('change')

class CheckList(QtWidgets.QMainWindow):
    def __init__(self,parent):
        super().__init__(parent)
        self.resize(324,576)
        # self.scrollarea = QtWidgets.QScrollArea(self)
        # self.scrollarea.setFixedWidth(50)
        # self.scrollarea.setWidgetResizable(True)
        self.checklist = user_checklist
        # checklist *= 3
        self.group = QtWidgets.QGroupBox(self)
        self.group.setGeometry(0,0,324,576)
        self.layout = QtWidgets.QGridLayout(self.group)

        for idx,ch in enumerate(self.checklist):
            checkbox = QtWidgets.QCheckBox(ch)
            self.layout.addWidget(checkbox,idx//3, idx%3)
        self.restore_checklist()
        save_btn = QtWidgets.QPushButton('save')
        save_btn.released.connect(self.save_checklist)
        self.layout.addWidget(save_btn,35,0)
        cancel_btn = QtWidgets.QPushButton('cancel')
        cancel_btn.released.connect(self.restore_checklist)
        self.layout.addWidget(cancel_btn,35,1)
        
    def restore_checklist(self):
        # print(self.checklist)
        for idx in range(len(self.checklist)):
            checkbox = self.layout.itemAt(idx).widget()
            checkbox.setChecked(self.checklist[checkbox.text()])
        
        self.hide()

    def save_checklist(self):
        for idx in range(len(self.checklist)):
            checkbox = self.layout.itemAt(idx).widget()
            text = checkbox.text()
            checked = checkbox.isChecked()
            # print(checkbox.text(),checkbox.isChecked())
            self.checklist[text] = checked
        config.set_checklist(self.checklist)
        config.save_checklist()

        
        self.hide()
        # print(self.checklist)

class Ui_Dialog(object):
    def dropImg(self,img_url):
        raw_img = np.fromfile(img_url,np.uint8)
        np_img = cv2.imdecode(raw_img,cv2.IMREAD_COLOR)
        self.image_map.setImage(np_img)
        self.drag_navigator.setParent(None)
        self.np_img = np_img
        self.ready_to_send = True
        self.user_data = user_checklist
        self.send_button.setEnabled(True)
    def sendImg(self):
        print('send')
        # print(self.raw_img)
        user_data = [key for key in self.user_data if self.user_data[key]]
        # print(user_data)
        if self.ready_to_send:
            repr = client_process(config.ADDR, self.np_img,user_data)
            self.ready_to_send=False
        self.food_group.set_pepr(repr)
        self.send_button.setEnabled(False)
        # self.class_name.item(0).setText(repr[0])
        # self.recipes.item(0).setText(repr[1])
        # self.recipes.item(2).setText(repr[2])
        print(repr)

    def qt_connect(self):
        self.dialog.dropped.connect(self.dropImg)
        self.send_button.released.connect(self.sendImg)
        
        # self.checkbox.clicked.connect(self.test)
        # self.checkbox2.clicked.connect(self.test)
        # self.checkbox.toggled.connect(self.test)
        # self.checkbox.extend_bar.clicked.connect(self.test)
    def test(self,b):
        print('test',b)
    def setupUi(self, Dialog):
        self.ready_to_send = False
        
        self.dialog = Dialog

        self.food_group = FoodGroupBox(Dialog)
        
        self.image_frame = QtWidgets.QFrame(Dialog)
        self.image_frame.setGeometry(QtCore.QRect(0, 0, 512, 512))
        self.image_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.image_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.image_frame.setObjectName("image_frame")

        self.image_map = ImagePixMap(self.image_frame)

        self.checkbox = CheckScroll2(Dialog)
        # self.checkbox2 = QtWidgets.QPushButton('ddd',Dialog)
        # self.checkbox2.setCheckable(True)
        
        self.send_button = QtWidgets.QPushButton('Send',Dialog)
        self.send_button.setCheckable(False)
        self.send_button.setEnabled(False)
        self.send_button.setGeometry(QtCore.QRect(72,524,84,28))

        self.drag_navigator = QtWidgets.QListWidget(self.image_frame)
        self.drag_navigator.setGeometry(QtCore.QRect(190, 220, 141, 21))
        self.drag_navigator.setObjectName("drag_navigator")
        self.drag_navigator.addItem(QtWidgets.QListWidgetItem())
        self.drag_navigator.raise_()

        self.qt_connect()
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        
        self.drag_navigator.setWhatsThis(_translate("Dialog", "<html><head/><body><p><br/></p></body></html>"))
        __sortingEnabled = self.drag_navigator.isSortingEnabled()
        self.drag_navigator.setSortingEnabled(False)
        item = self.drag_navigator.item(0)
        item.setText(_translate("Dialog", "이미지를 드래그 하세요"))
        self.drag_navigator.setSortingEnabled(__sortingEnabled)


def start_ui():
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = MainDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = MainDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
